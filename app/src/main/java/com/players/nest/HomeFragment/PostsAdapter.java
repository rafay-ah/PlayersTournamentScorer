package com.players.nest.HomeFragment;import android.annotation.SuppressLint;import android.content.Context;import android.content.Intent;import android.net.Uri;import android.os.Bundle;import android.text.format.DateUtils;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.VideoView;import androidx.annotation.NonNull;import androidx.constraintlayout.widget.ConstraintLayout;import androidx.fragment.app.FragmentActivity;import androidx.recyclerview.widget.RecyclerView;import com.bumptech.glide.Glide;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import com.players.nest.HelperClasses.CachingVideos;import com.players.nest.HelperClasses.Constants;import com.players.nest.HelperClasses.GlideImageLoader;import com.players.nest.HelperClasses.HelperMethods;import com.players.nest.HelperClasses.ShareBottomSheet;import com.players.nest.HelperClasses.ViewPostBottomSheet;import com.players.nest.ModelClasses.Comment;import com.players.nest.ModelClasses.User;import com.players.nest.ModelClasses.UsersPosts;import com.players.nest.ProfileFragment.ViewProfileFragment;import com.players.nest.R;import java.util.ArrayList;import java.util.HashMap;import static com.players.nest.MainActivity.MAIN_ACTIVITY_FRAGMENT;public class PostsAdapter extends RecyclerView.Adapter<PostsAdapter.myViewHolderClass> {    public static final String HOME_POSTS_TYPE = "FROM_VIEW_PROFILE";    public static final String IMAGE_LIKED = "IMAGE_LIKED";    public static final String IMAGE_NOT_LIKED = "IMAGE_NOT_LIKED";    public static final String FROM_HOME_FRAGMENT = "FROM_HOME_FRAGMENT";    private static final String TAG = "POST_ADAPTER";    Context context;    ArrayList<UsersPosts> usersPosts;    ArrayList<Comment> commentList = new ArrayList<>();    public PostsAdapter(Context context, ArrayList<UsersPosts> usersPosts) {        this.context = context;        this.usersPosts = usersPosts;    }    @NonNull    @Override    public myViewHolderClass onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        View view = inflater.inflate(R.layout.posts_recycler_view_layout, parent, false);        return new myViewHolderClass(view);    }    @SuppressLint("SetTextI18n")    @Override    public void onBindViewHolder(@NonNull myViewHolderClass holder, int position) {        if (usersPosts.get(position).getPostType().equals(Constants.VIDEO_POST_TYPE)) {            holder.postImageView.setVisibility(View.GONE);            holder.imgPlaceHolder.setVisibility(View.GONE);            holder.mainVideoLayout.setVisibility(View.VISIBLE);            playVideo(holder, usersPosts.get(position).getImageUri());        } else {            holder.playIcon.setVisibility(View.GONE);            holder.mainVideoLayout.setVisibility(View.GONE);            holder.imgPlaceHolder.setVisibility(View.VISIBLE);            holder.postImageView.setVisibility(View.VISIBLE);            GlideImageLoader.loadImageWithPlaceHolder(context, usersPosts.get(position).getImageUri()                    , holder.postImageView, holder.imgPlaceHolder);            //If Posts Turn off Comments is enabled.            if (usersPosts.get(position).isTurnOffComments()) {                holder.allCommentsLayout.setVisibility(View.GONE);                holder.commentIcon.setVisibility(View.GONE);            } else {                holder.allCommentsLayout.setVisibility(View.VISIBLE);                holder.commentIcon.setVisibility(View.VISIBLE);            }        }        //Likes        HashMap<String, Object> hashMap = usersPosts.get(position).getLikes();        if (hashMap == null) {            holder.likeIcon.setTag(IMAGE_NOT_LIKED);            holder.likesCount.setText("0 Likes");        }        //Date        holder.timeCreated.setText(DateUtils.getRelativeTimeSpanString(                Long.parseLong(usersPosts.get(position).getDateCreated()),                System.currentTimeMillis(), DateUtils.MINUTE_IN_MILLIS));        bindUsersData(holder.profilePic, holder.usernameAndCaption, holder.userName, usersPosts.get(position).getCaption(),                usersPosts.get(position).getUserId(), position);        HelperMethods ob1 = new HelperMethods(context, usersPosts.get(position).getPostId(), holder.likeIcon);        ob1.likeListener(holder.likesCount);        getComments(usersPosts.get(position).getPostId(), holder.allCommentsLayout, holder.viewAllCommentsTxt);    }    private void playVideo(myViewHolderClass holderClass, String imageUri) {        holderClass.playIcon.setVisibility(View.GONE);        holderClass.videoView.setVisibility(View.VISIBLE);        holderClass.videoLoadingLayout.setVisibility(View.VISIBLE);        String videoUriLastPathSegment = Uri.parse(imageUri).getLastPathSegment();        if (CachingVideos.isVideoExistsInCache(context, videoUriLastPathSegment)) {            assert videoUriLastPathSegment != null;            holderClass.videoView.setVideoPath(CachingVideos.getVideoFile(context, videoUriLastPathSegment).getPath());        } else            CachingVideos.putVideoIntoCache(context, holderClass.videoView, imageUri);        holderClass.mainVideoLayout.setOnClickListener(v -> {            if (holderClass.videoView.isPlaying()) {                holderClass.playIcon.setVisibility(View.VISIBLE);                holderClass.videoView.pause();            } else {                holderClass.videoView.start();                holderClass.playIcon.setVisibility(View.GONE);            }        });        holderClass.videoView.setOnCompletionListener(mp -> holderClass.videoView.start());        holderClass.videoView.setOnPreparedListener(mp -> {            holderClass.videoLoadingLayout.setVisibility(View.GONE);        });    }    public void getComments(String postID, final LinearLayout viewAllComment, final TextView commentTxt) {        FirebaseDatabase.getInstance().getReference(context.getString(R.string.DB_COMMENTS))                .child(postID).addListenerForSingleValueEvent(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot snapshot) {                commentList.clear();                for (DataSnapshot dataSnapshot : snapshot.getChildren()) {                    Comment comment = dataSnapshot.getValue(Comment.class);                    commentList.add(comment);                }                if (commentList.size() == 0)                    viewAllComment.setVisibility(View.GONE);                else {                    viewAllComment.setVisibility(View.VISIBLE);                    commentTxt.setText(context.getString(R.string.VIEW_ALL_COMMENTS, commentList.size()));                }            }            @Override            public void onCancelled(@NonNull DatabaseError error) {            }        });    }    @Override    public int getItemCount() {        return usersPosts.size();    }    private void bindUsersData(final ImageView profilePic, final TextView nameAndCaption, final TextView userName,                               final String caption, String userID, final int position) {        DatabaseReference reference = FirebaseDatabase.getInstance().getReference(context.getString(R.string.DB_USERS)).child(userID);        reference.addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot snapshot) {                User userDetails = snapshot.getValue(User.class);                usersPosts.get(position).setUser(userDetails);                assert userDetails != null;                if (userDetails.getProfilePic() != null) {                    if (!userDetails.getProfilePic().equals(""))                        Glide.with(context.getApplicationContext()).load(userDetails.getProfilePic()).into(profilePic);                }                userName.setText(userDetails.getUsername());                nameAndCaption.setText(HelperMethods.usernameAndCaption(userDetails.getUsername(), caption));            }            @Override            public void onCancelled(@NonNull DatabaseError error) {            }        });    }    public class myViewHolderClass extends RecyclerView.ViewHolder implements View.OnClickListener {        VideoView videoView;        FrameLayout videoLoadingLayout;        ConstraintLayout mainVideoLayout;        ImageView profilePic, postImageView, likeIcon,                optionMenu, commentIcon, shareIcon;        TextView userName, usernameAndCaption, likesCount,                viewAllCommentsTxt, timeCreated;        LinearLayout playIcon, allCommentsLayout, imgPlaceHolder;        public myViewHolderClass(@NonNull View itemView) {            super(itemView);            userName = itemView.findViewById(R.id.textView46);            likeIcon = itemView.findViewById(R.id.imageView13);            profilePic = itemView.findViewById(R.id.profile_pic_2);            postImageView = itemView.findViewById(R.id.imageView8);            commentIcon = itemView.findViewById(R.id.imageView14);            optionMenu = itemView.findViewById(R.id.imageView5);            timeCreated = itemView.findViewById(R.id.textView59);            likesCount = itemView.findViewById(R.id.textView8);            videoView = itemView.findViewById(R.id.videoView2);            playIcon = itemView.findViewById(R.id.play_icon_layout);            shareIcon = itemView.findViewById(R.id.imageView15);            mainVideoLayout = itemView.findViewById(R.id.frameLayout);            videoLoadingLayout = itemView.findViewById(R.id.placeholder);            viewAllCommentsTxt = itemView.findViewById(R.id.textView11);            imgPlaceHolder = itemView.findViewById(R.id.linearLayout44);            usernameAndCaption = itemView.findViewById(R.id.textView47);            allCommentsLayout = itemView.findViewById(R.id.linearLayout26);            likeIcon.setOnClickListener(this);            optionMenu.setOnClickListener(this);            userName.setOnClickListener(this);            commentIcon.setOnClickListener(this);            allCommentsLayout.setOnClickListener(this);            shareIcon.setOnClickListener(this);        }        @Override        public void onClick(View view) {            HelperMethods ob1 = new HelperMethods(context, usersPosts.get(getAdapterPosition()).getPostId(), likeIcon);            User userObject = usersPosts.get(getAdapterPosition()).getUser();            if (view.getId() == R.id.imageView13) {                if (likeIcon.getTag().equals(IMAGE_NOT_LIKED))                    ob1.likePostAndSaveIntoDatabase();                else                    ob1.unLikePost();            } else if (view.getId() == R.id.imageView5) {                ViewPostBottomSheet bottomSheet = new ViewPostBottomSheet(HOME_POSTS_TYPE, false);                bottomSheet.setTargetFragment(((FragmentActivity) (context)).getSupportFragmentManager()                        .findFragmentByTag(MAIN_ACTIVITY_FRAGMENT), 100);                bottomSheet.show(((FragmentActivity) context).getSupportFragmentManager(), "ViewProfileBottomSheet");            } else if (view.getId() == R.id.textView46) {                ViewProfileFragment viewProfileFragment = new ViewProfileFragment();                Bundle bundle = new Bundle();                bundle.putParcelable(FROM_HOME_FRAGMENT, userObject);                viewProfileFragment.setArguments(bundle);                ((FragmentActivity) context).getSupportFragmentManager().beginTransaction()                        .replace(R.id.fragmentHolder, viewProfileFragment).addToBackStack(MAIN_ACTIVITY_FRAGMENT).commit();            }            //Comments Activity            else if (view.getId() == R.id.imageView14 || view.getId() == R.id.linearLayout26)                startCommentActivity(userObject, getAdapterPosition());            else if (view.getId() == R.id.imageView15)                openShareFragment(getAdapterPosition());        }    }    private void startCommentActivity(User userObject, int adapterPosition) {        UsersPosts userPost = usersPosts.get(adapterPosition);        Intent intent = new Intent(context, CommentsActivity.class);        intent.putExtra(Constants.USER_OBJECT, userObject);        intent.putExtra(Constants.USER_POST_OBJECT, userPost);        context.startActivity(intent);    }    private void openShareFragment(int adapterPosition) {        ShareBottomSheet bottomSheet = new ShareBottomSheet(context, usersPosts.get(adapterPosition));        bottomSheet.show(((FragmentActivity) (context)).getSupportFragmentManager(), "SHARE_BOTTOM_SHEET");    }    @Override    public void onViewAttachedToWindow(@NonNull final myViewHolderClass holder) {        super.onViewAttachedToWindow(holder);        if (holder.mainVideoLayout.getVisibility() == View.VISIBLE) {            holder.videoLoadingLayout.setVisibility(View.VISIBLE);        } else            holder.playIcon.setVisibility(View.GONE);    }}